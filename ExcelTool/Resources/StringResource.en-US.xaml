<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <sys:String x:Key="WinTitle">Excel Tool</sys:String>
    <sys:String x:Key="Analyzer">Analyzer</sys:String>
    <sys:String x:Key="SheetExplainer">Sheet explainer</sys:String>
    <sys:String x:Key="SetSheetExplainer">Set sheet explainer</sys:String>
    <sys:String x:Key="SetAnalyzer">Set analyzer</sys:String>
    <sys:String x:Key="Parameter">Parameter</sys:String>
    <sys:String x:Key="Edit">Edit</sys:String>
    <sys:String x:Key="Workbase">Workbase [If you enter relative pathes in the sheet explainer]</sys:String>
    <sys:String x:Key="Select">Select</sys:String>
    <sys:String x:Key="OutputPath">Output path</sys:String>
    <sys:String x:Key="Open">Open</sys:String>
    <sys:String x:Key="OutputFileName">Output file name</sys:String>
    <sys:String x:Key="Rule">Rule</sys:String>
    <sys:String x:Key="Save">Save</sys:String>
    <sys:String x:Key="Close">Close</sys:String>
    <sys:String x:Key="Delete">Delete</sys:String>
    <sys:String x:Key="AutomaticallyOpening">Opens automatically when finished</sys:String>
    <sys:String x:Key="Stop">Stop</sys:String>
    <sys:String x:Key="Start">Start</sys:String>
    <sys:String x:Key="AnalyzerEditor">Analyzere ditor</sys:String>
    <sys:String x:Key="EditParameter">Edit parameter</sys:String>
    <sys:String x:Key="SheetExplainerEditor">Sheet explainer editor</sys:String>
    <sys:String x:Key="PathList">Path list</sys:String>
    <sys:String x:Key="FileNameList">File name list</sys:String>
    <sys:String x:Key="Same">Same</sys:String>
    <sys:String x:Key="Contain">Contain</sys:String>
    <sys:String x:Key="RegExp">Regular expression</sys:String>
    <sys:String x:Key="All">All</sys:String>
    <sys:String x:Key="SheetNameList">Sheet name list</sys:String>
    <sys:String x:Key="Error">Error</sys:String>
    <sys:String x:Key="PathNotExists">Path does not exist</sys:String>
    <sys:String x:Key="Ok">Ok</sys:String>
    <sys:String x:Key="Timeout">Timeout</sys:String>
    <sys:String x:Key="TotalTimeout">Total timeout</sys:String>
    <sys:String x:Key="Analyzing">Analyzing...</sys:String>
    <sys:String x:Key="ExceptionHasBeenThrowed">Exception has been thrown</sys:String>
    <sys:String x:Key="Outputting">Outputting...</sys:String>
    <sys:String x:Key="Info">Info</sys:String>
    <sys:String x:Key="FileNotSaved">File not saved</sys:String>
    <sys:String x:Key="OpenFile">Open file</sys:String>
    <sys:String x:Key="OpenPath">Open path</sys:String>
    <sys:String x:Key="FileSaved">File saved</sys:String>
    <sys:String x:Key="AutoOpened">The file was opened automatically</sys:String>
    <sys:String x:Key="FailedToSaveFile">Failed to save. Please try again.</sys:String>
    <sys:String x:Key="Yes">Yes</sys:String>
    <sys:String x:Key="No">No</sys:String>
    <sys:String x:Key="FailedToCreateANewFolder">Failed to create a new folder</sys:String>
    <sys:String x:Key="Warning">Warning</sys:String>
    <sys:String x:Key="ProgramClosingCheck">At least one child window that isn't closed, continue?</sys:String>
    <sys:String x:Key="Cancel">Cancel</sys:String>
    <sys:String x:Key="Saving">Saving</sys:String>
    <sys:String x:Key="Name">Name</sys:String>
    <sys:String x:Key="WatchPath">Please enter the expression for matching files</sys:String>
    <sys:String x:Key="WatchFilter">Please enter the monitoring path</sys:String>
    <sys:String x:Key="WatchPathNotExists">Monitoring path does not exist</sys:String>
    <sys:String x:Key="Unknown">Unknown</sys:String>
    <sys:String x:Key="SetAuto">Set to automatic</sys:String>
    <sys:String x:Key="SetManual">Set to manual</sys:String>
    <sys:String x:Key="SuccessfullySaved">Saved successfully</sys:String>
    <sys:String x:Key="Copied">Copied to the clipboard successfully</sys:String>
    <sys:String x:Key="ParameterEditor">Parameter editor</sys:String>
    <sys:String x:Key="ActiveThreads">Active threads</sys:String>
    <sys:String x:Key="InUseThreads">In use threads</sys:String>
    <sys:String x:Key="SelectFile">Please select a file</sys:String>
    <sys:String x:Key="File">file</sys:String>
    <sys:String x:Key="ParamKey">Param key</sys:String>
    <sys:String x:Key="ParamDescription">Param description</sys:String>
    <sys:String x:Key="ParamPossibleValues">Possible values</sys:String>
    <sys:String x:Key="ExecuteInSequence">Execute in sequence</sys:String>
    <sys:String x:Key="RunFailed">Run failed</sys:String>
    <sys:String x:Key="FileIsInUse">File is in use</sys:String>
    <sys:String x:Key="FileIsDamaged">File is damaged</sys:String>
    <sys:String x:Key="MethodNotFound">Method {0} not found</sys:String>
    <sys:String x:Key="FileNotFound">File {0} not found</sys:String>
    <sys:String x:Key="UnblockDllsCopiedFromTheWeb" xml:space="preserve">The .dll file {0} is not supported or may copied from the web or another computer, please unblock to use the dll file and restart the software. &#13;&#10;1. Right clicking on the Assembly file and selecting properties&#13;&#10;2. Click Unblock button under the General tab&#13;&#10;3. Click Apply and then OK&#13;&#10;To bypass the security check, please change the SecurityCheck field in Setting.ini to False. </sys:String>
    <sys:String x:Key="FileNotSupported">The .Dll file "{0}" is not supported.</sys:String>
    <sys:String x:Key="Code" xml:space="preserve">using ClosedXML.Excel;
using GlobalObjects;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;

namespace AnalyzeCode
{
    class Analyze
    {
        /// &lt;summary>
        /// Call before all analyses
        /// &lt;/summary>
        /// &lt;param name="param">Parameters passed in&lt;/param>
        /// &lt;param name="globalObject">Global existence, can save data that needs to be used in other calls, such as the current line number, etc.&lt;/param>
        /// &lt;param name="allFilePathList">A list of all file paths that will be analyzed&lt;/param>
        /// &lt;param name="isExecuteInSequence">Whether to execute sequentially&lt;/param>
        public void RunBeforeAnalyzeSheet(Param param, ref Object globalObject, List&lt;string> allFilePathList, bool isExecuteInSequence)
        {
            
        }

        /// &lt;summary>
        /// Analyze a sheet
        /// &lt;/summary>
        /// &lt;param name="param">Parameters passed in&lt;/param>
        /// &lt;param name="sheet">Sheet to be analyzed&lt;/param>
        /// &lt;param name="result">Store the information of the current file ResultType { (String) FILEPATH [file path], (String) FILENAME [file name], (String) MESSAGE [message output when there is a problem with searching], (Object) RESULTOBJECT [user-defined Analysis results] }&lt;/param>
        /// &lt;param name="globalObject">Global existence, can save data that needs to be used in other calls, such as the current line number, etc.&lt;/param>
        /// &lt;param name="isExecuteInSequence">Whether to execute sequentially&lt;/param>
        /// &lt;param name="invokeCount">The number of times this analysis function was called&lt;/param>
        public void AnalyzeSheet(Param param, IXLWorksheet sheet, ConcurrentDictionary&lt;ResultType, Object> result, ref Object globalObject, bool isExecuteInSequence, int invokeCount)
        {
            
        }

        /// &lt;summary>
        /// call before all output
        /// &lt;/summary>
        /// &lt;param name="param">Parameters passed in&lt;/param>
        /// &lt;param name="workbook">Excel file for output&lt;/param>
        /// &lt;param name="globalObject">Global existence, can save data that needs to be used in other calls, such as the current line number, etc.&lt;/param>
        /// &lt;param name="resultList">Information on all files&lt;/param>
        /// &lt;param name="allFilePathList">List of all file paths analyzed&lt;/param>
        /// &lt;param name="isExecuteInSequence">Whether to execute sequentially&lt;/param>
        public void RunBeforeSetResult(Param param, XLWorkbook workbook, ref Object globalObject, ICollection&lt;ConcurrentDictionary&lt;ResultType, Object>> resultList, List&lt;string> allFilePathList, bool isExecuteInSequence)
        {
            
        }

        /// &lt;summary>
        /// Export the analysis results to excel
        /// &lt;/summary>
        /// &lt;param name="param">Parameters passed in&lt;/param>
        /// &lt;param name="workbook">Excel file for output&lt;/param>
        /// &lt;param name="result">Store the information of the current file ResultType { (String) FILEPATH [file path], (String) FILENAME [file name], (String) MESSAGE [message output when there is a problem with searching], (Object) RESULTOBJECT [user-defined Analysis results] }&lt;/param>
        /// &lt;param name="globalObject">Global existence, can save data that needs to be used in other calls, such as the current line number, etc.&lt;/param>
        /// &lt;param name="isExecuteInSequence">Whether to execute sequentially&lt;/param>
        /// &lt;param name="invokeCount">The number of times this output function was called&lt;/param>
        /// &lt;param name="totalCount">The total number of times the output function needs to be called&lt;/param>
        public void SetResult(Param param, XLWorkbook workbook, ConcurrentDictionary&lt;ResultType, Object> result, ref Object globalObject, bool isExecuteInSequence, int invokeCount, int totalCount)
        {
            
        }

        /// &lt;summary>
        /// Call after all calls have finished
        /// &lt;/summary>
        /// &lt;param name="param">Parameters passed in&lt;/param>
        /// &lt;param name="workbook">Excel file for output&lt;/param>
        /// &lt;param name="globalObject">Global existence, can save data that needs to be used in other calls, such as the current line number, etc.&lt;/param>
        /// &lt;param name="resultList">Information on all files&lt;/param>
        /// &lt;param name="allFilePathList">List of all file paths analyzed&lt;/param>
        /// &lt;param name="isExecuteInSequence">Whether to execute sequentially&lt;/param>
        public void RunEnd(Param param, XLWorkbook workbook, ref Object globalObject, ICollection&lt;ConcurrentDictionary&lt;ResultType, Object>> resultList, List&lt;string> allFilePathList, bool isExecuteInSequence)
        {
            
        }
    }
}</sys:String>
</ResourceDictionary>